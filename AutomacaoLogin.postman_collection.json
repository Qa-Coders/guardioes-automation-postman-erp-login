{
	"info": {
		"_postman_id": "fbc71851-80d0-4159-ae66-759f23c4cc68",
		"name": "AutomacaoLogin",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11126906",
		"_collection_link": "https://kadarphoenix.postman.co/workspace/Hackton-Qa.Academy~57582428-5ace-4026-8e5e-4b3e788d9d24/collection/11126906-fbc71851-80d0-4159-ae66-759f23c4cc68?action=share&source=collection_link&creator=11126906"
	},
	"item": [
		{
			"name": "Caminho Feliz",
			"item": [
				{
					"name": "LoginWithSucess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Token is True\", function () {\r",
									"    pm.expect(pm.response.json().token).to.exist;\r",
									"});\r",
									"\r",
									"// Save the token and user id in environment variables\r",
									"pm.environment.set(\"Token\", pm.variables.replaceIn(pm.response.json().token));\r",
									"pm.environment.set(\"idUsuario\", pm.variables.replaceIn(pm.response.json().user._id));\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Função para obter um primeiro nome aleatório",
									"function firstName(){",
									"    var firstName = [\"Maria\",\"João\",\"Ana\",\"Pedro\",\"Carla\",\"Lucas\",\"Mariana\",\"Paulo\",\"Camila\",\"Rafael\",\"Juliana\",\"Gustavo\",\"Larissa\",\"Fernando\",\"Amanda\",\"Diego\",\"Isabela\",\"Ricardo\",\"Natália\",\"Henrique\",\"Lívia\",\"Roberto\",\"Sofia\",\"Eduardo\",\"Vitória\",\"Fábio\",\"Mariana\",\"André\",\"Letícia\",\"Rodrigo\",\"Lara\",\"Guilherme\",\"Bianca\",\"Miguel\",\"Alice\",\"Leonardo\",\"Laura\",\"Daniel\",\"Beatriz\",\"Felipe\",\"Luiza\",\"Arthur\",\"Helena\",\"Gabriel\",\"Valentina\",\"Bernardo\",\"Sophia\",\"Vitor\",\"Clara\",\"Francisco\",\"Yasmin\",\"Enzo\",\"Isabel\",\"Isabella\",\"Lorenzo\",\"Joana\",\"Samuel\",\"Melissa\",\"Otávio\",\"Ana\",\"Breno\",\"Cecília\",\"Benjamin\",\"Luana\",\"Mariane\",\"Davi\",\"Nathália\",\"Raul\",\"Isadora\",\"Marcelo\",\"Luna\",\"Nicolas\",\"Laís\",\"Augusto\",\"Stella\",\"Ruan\",\"Gabriela\",\"Luciano\",\"Evelyn\",\"Thiago\",\"Lorena\",\"Vinícius\",\"Catarina\",\"Murilo\",\"Pietra\",\"Tomás\",\"Carolina\",\"Caio\",\"Manuela\",\"Emanuelly\",\"Lavinia\",\"Lucca\",\"Mirella\",\"Kevin\",\"Rebeca\",\"Anthony\",\"Júlia\"];",
									"    var randomItem = firstName[Math.floor(Math.random() * firstName.length)];",
									"    return randomItem;",
									"}",
									"",
									"// Função para obter um sobrenome aleatório",
									"function lastName(){",
									"    var lastName = [\"Silva\",\"Santos\",\"Oliveira\",\"Souza\",\"Rodrigues\",\"Almeida\",\"Costa\",\"Pereira\",\"Carvalho\",\"Ferreira\",\"Gomes\",\"Martins\",\"Rocha\",\"Ribeiro\",\"Alves\",\"Lima\",\"Sousa\",\"Fernandes\",\"Pinto\",\"Cunha\",\"Mendes\",\"Barbosa\",\"Saraiva\",\"Machado\",\"Cardoso\",\"Nogueira\",\"Ramos\",\"Coelho\",\"Araújo\",\"Castro\",\"Fonseca\",\"Rocha\",\"Moreira\",\"Figueiredo\",\"Gonçalves\",\"Monteiro\",\"Marques\",\"Peixoto\",\"Morais\",\"Lopes\",\"Vieira\",\"Tavares\",\"Correia\",\"Neves\",\"Nunes\",\"Cavalcanti\",\"Andrade\",\"Freitas\",\"Coutinho\",\"Rezende\",\"Macedo\",\"Borges\",\"Barros\",\"Melo\",\"Barbosa\",\"Campos\",\"Lemos\",\"Braga\",\"Teixeira\",\"Dias\",\"Albuquerque\",\"Sampaio\",\"Moura\",\"Rocha\",\"Silveira\",\"Aguiar\",\"Abreu\",\"Lima\",\"Pacheco\",\"Vargas\",\"Farias\",\"Moraes\",\"Ferreira\",\"Gusmão\",\"Sousa\",\"Azevedo\",\"Dantas\",\"Cavalcante\",\"Batista\",\"Peixoto\",\"Pires\",\"Leite\",\"Ramos\",\"Macedo\",\"Sales\",\"Carneiro\",\"Monteiro\",\"Goulart\",\"Cruz\",\"Fialho\",\"Xavier\",\"Prado\",\"Valente\",\"Furtado\",\"Vieira\"];",
									"    var randomItem = lastName[Math.floor(Math.random() * lastName.length)];",
									"    return randomItem;",
									"}",
									"",
									"// Função para obter um domínio de e-mail aleatório",
									"function domain(){",
									"    var domain = [\"@gmail.com\",\"@hotmail.com\",\"@yahoo.com\",\"@outlook.com\",\"@aol.com\",\"@icloud.com\",\"@protonmail.com\",\"@gmx.com\",\"@mail.com\",\"@zoho.com\",\"@yandex.com\",\"@live.com\",\"@rocketmail.com\",\"@fastmail.com\",\"@tutanota.com\",\"@inbox.com\",\"@me.com\",\"@rediffmail.com\",\"@sbcglobal.net\",\"@cox.net\",\"@yahoo.co.uk\",\"@att.net\",\"@mail.ru\",\"@optonline.net\",\"@ymail.com\",\"@outlook.com.br\",\"@live.com.mx\",\"@gmx.de\",\"@web.de\",\"@yahoo.com.br\",\"@yandex.ru\",\"@hotmail.fr\",\"@hotmail.co.uk\",\"@yahoo.fr\",\"@outlook.es\",\"@mail.ru\",\"@orange.fr\",\"@libero.it\",\"@hotmail.it\",\"@yahoo.it\",\"@o2.pl\",\"@wp.pl\",\"@interia.pl\",\"@onet.pl\",\"@seznam.cz\",\"@abv.bg\",\"@gmx.at\",\"@gmx.ch\",\"@bluewin.ch\",\"@inbox.lv\",\"@rambler.ru\",\"@mail.bg\",\"@yahoo.ca\",\"@hotmail.ca\",\"@bell.net\",\"@hotmail.com.au\",\"@yahoo.com.au\",\"@t-online.de\",\"@arcor.de\",\"@cox.net\",\"@verizon.net\",\"@yahoo.de\",\"@hotmail.de\",\"@wanadoo.fr\",\"@live.fr\",\"@gmx.fr\",\"@mail.be\",\"@telenet.be\",\"@hotmail.be\",\"@yahoo.co.in\",\"@live.in\",\"@rediffmail.com\",\"@hotmail.in\",\"@indiatimes.com\",\"@yahoo.co.id\",\"@hotmail.co.id\",\"@yahoo.com.sg\",\"@outlook.sg\",\"@hotmail.com.sg\",\"@yahoo.com.ph\",\"@yahoo.com.vn\",\"@yahoo.com.ar\",\"@yahoo.com.mx\",\"@yahoo.com.co\",\"@yahoo.com.pe\",\"@yahoo.com.ve\",\"@yahoo.com.ec\",\"@yahoo.com.bo\",\"@yahoo.com.gt\",\"@yahoo.com.do\",\"@yahoo.com.pa\",\"@yahoo.com.hk\",\"@yahoo.com.tw\",\"@yahoo.com.cn\",\"@yahoo.co.jp\",\"@yahoo.co.kr\",\"@yahoo.co.th\",\"@yahoo.com.my\",\"@yahoo.com.sa\",\"@yahoo.ae\",\"@yahoo.co.il\",\"@yahoo.com.tr\",\"@yahoo.com.eg\",\"@yahoo.com.ng\",\"@yahoo.co.za\",\"@yahoo.com.au\",\"@yahoo.com.nz\",\"@yahoo.com.ph\",\"@yahoo.com.vn\"];",
									"    var randomItem = domain[Math.floor(Math.random() * domain.length)];",
									"    return randomItem;",
									"}",
									"",
									"// Defina as variáveis de ambiente no Postman",
									"pm.environment.set(\"FullName\", firstName() + \" \" + lastName());",
									"pm.environment.set(\"Domain\", domain());",
									"pm.environment.set(\"Password\", gerarSenha());",
									"",
									"function mail(){",
									"    var user = pm.variables.get(\"FullName\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")",
									"    var mail = user+pm.variables.get(\"Domain\");",
									"    return mail;",
									"}",
									"",
									"pm.environment.set(\"Mail\", mail());",
									"",
									"// Enviar solicitação POST usando as variáveis de ambiente definidas",
									"pm.sendRequest({",
									"    url: pm.variables.replaceIn('{{URL}}/api/signup'),",
									"    method: 'POST',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            fullName: pm.environment.get('FullName'),",
									"            mail: pm.environment.get('Mail'),",
									"            password: pm.environment.get('Password'),",
									"            confirmPassword: pm.environment.get('Password'),",
									"            accessProfile: \"ADMIN\",",
									"            idCompany: \"12345679009\"",
									"        })",
									"    }",
									"}, function (err, response) {",
									"    if (err) {",
									"        console.error(err);",
									"        return;",
									"    }",
									"    ",
									"    // Verifique o status da resposta",
									"    if (response.code === 200) {",
									"        console.log('Registro inserido com sucesso!');",
									"    } else {",
									"        console.error('Erro ao inserir registro. Código de status:', response.code);",
									"        console.error('Resposta:', response.text());",
									"    }",
									"});",
									"",
									"// Função para gerar uma senha aleatória",
									"function gerarSenha() {",
									"  const caracteres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";",
									"  const comprimentoMinimo = 8;",
									"  const comprimentoMaximo = 12;",
									"  ",
									"  let senhaArray = [];",
									"",
									"  // Garante pelo menos um caractere maiúsculo, minúsculo, número e especial",
									"  senhaArray.push(caracteres[Math.floor(Math.random() * 26)]); // Caractere maiúsculo",
									"  senhaArray.push(caracteres[26 + Math.floor(Math.random() * 26)]); // Caractere minúsculo",
									"  senhaArray.push(caracteres[52 + Math.floor(Math.random() * 10)]); // Número",
									"  senhaArray.push(caracteres[62 + Math.floor(Math.random() * 4)]); // Caractere especial",
									"",
									"  const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);",
									"",
									"  for (let i = 0; i < comprimentoRestante; i++) {",
									"    senhaArray.push(caracteres[Math.floor(Math.random() * caracteres.length)]);",
									"  }",
									"",
									"  return shuffleString(senhaArray.join(\"\"));",
									"}",
									"",
									"// Função para embaralhar uma string",
									"function shuffleString(string) {",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{Mail}}\",\r\n    \"password\": \"{{Password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar cadastro login de  acesso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"Schema\",\r",
									"\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"_id\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"registration\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"fullName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"mail\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"password\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"accessProfile\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"idCompany\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"status\": {\r",
									"        \"type\": \"boolean\"\r",
									"      },\r",
									"      \"audit\": {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"registrationDate\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"_id\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"registrationDate\",\r",
									"            \"_id\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"__v\": {\r",
									"        \"type\": \"number\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"_id\",\r",
									"      \"registration\",\r",
									"      \"fullName\",\r",
									"      \"mail\",\r",
									"      \"password\",\r",
									"      \"accessProfile\",\r",
									"      \"idCompany\",\r",
									"      \"status\",\r",
									"      \"audit\",\r",
									"      \"__v\"\r",
									"    ]\r",
									"  }\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Schema deve ser retornado como valido\", function (){",
									"    var jsonData = pm.response.json()",
									"    var schema = pm.variables.get(\"Schema\")",
									"    var isSchemaValid = tv4.validate(jsonData, schema)",
									"    if(!isSchemaValid)",
									"       console.error(tv4.error)",
									"    pm.expect(isSchemaValid).to.be.true  ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/logins",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"logins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Contar Usuários",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/api/logins/count",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"logins",
								"count"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Falso Positivo",
			"item": [
				{
					"name": "E-mail em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Dados Invalidos\", function () {",
									"        pm.expect(pm.variables.get(\"Msg_Login_Failed\")).to.eql(JSON.parse(responseBody).alert[0]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mail\": \"\",\n    \"password\": \"{{Password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "E-mail incorreto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Dados Invalidos\", function () {",
									"        pm.expect(pm.variables.get(\"Msg_Login_Failed\")).to.eql(JSON.parse(responseBody).alert[0]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mail\": \"ewrwerw@sdfs\",\n    \"password\": \"testeste\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Senha em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Dados Invalidos\", function () {",
									"        pm.expect(pm.variables.get(\"Msg_Login_Failed\")).to.eql(JSON.parse(responseBody).alert[0]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mail\": \"{{Mail}}\",\n    \"password\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Senha incorreta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Dados Invalidos\", function () {",
									"        pm.expect(pm.variables.get(\"Msg_Login_Failed\")).to.eql(JSON.parse(responseBody).alert[0]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mail\": \"{{Mail}}\",\n    \"password\": \"Teste@tes\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "E-mail fora do padrao",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Dados Invalidos\", function () {",
									"        pm.expect(pm.variables.get(\"Msg_Login_Failed\")).to.eql(JSON.parse(responseBody).alert[0]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mail\": \"teste#teste.com.br\",\n    \"password\": \"{{Password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Limpeza Dados",
			"item": [
				{
					"name": "Delete por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{Token}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{Token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{URL}}/api/logins/{{idUsuario}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"logins",
								"{{idUsuario}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}